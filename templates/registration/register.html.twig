{% extends 'base.html.twig' %}

{% block title %}Register{% endblock %}

{% block body %}
    {% for flash_error in app.flashes('verify_email_error') %}
        <div class="alert alert-danger" role="alert">{{ flash_error }}</div>
    {% endfor %}

    {% for flash_success in app.flashes('success') %}
        <div class="alert alert-success" role="alert">{{ flash_success }}</div>
    {% endfor %}

    <h1>Register</h1>

    {{ form_errors(registrationForm) }}

    {{ form_start(registrationForm) }}
    {{ form_row(registrationForm.email) }}
    {{ form_row(registrationForm.plainPassword, {
        label: 'Password'
    }) }}
    {{ form_row(registrationForm.agreeTerms) }}

    <button type="submit" class="btn">Register</button>
    {{ form_end(registrationForm) }}
{% endblock %}

 The  register.html.twig  template extends the  base.html.twig  template. The  register.html.twig  template contains a form to register a new user. The form is displayed using the  registrationForm  variable.
 The  registrationForm  variable is generated by Symfony's form component. The form component generates a form based on the  RegistrationFormType  class.
 The  register.html.twig  template contains a form with three fields:  email ,  plainPassword , and  agreeTerms . The  email  field is used to enter the email address of the user. The  plainPassword  field is used to enter the password of the user. The  agreeTerms  field is used to agree to the terms of service.
 The  form_start(registrationForm)  function is used to start the form. The  form_row(registrationForm.email)  function is used to render the  email  field. The  form_row(registrationForm.plainPassword, { label: 'Password' })  function is used to render the  plainPassword  field. The  form_row(registrationForm.agreeTerms)  function is used to render the  agreeTerms  field. The  form_errors(registrationForm)  function is used to render the form errors.
 The  {{ form_end(registrationForm) }}  function is used to end the form. The  <button type="submit" class="btn">Register</button>  code is used to create a submit button for the form.
 Step 6 - Create the RegistrationController
 The  RegistrationController  class is used to handle the registration form.
 Create a new file called  RegistrationController.php  inside the  src/Controller  directory and add the following code:
 <?php

// src/Controller/RegistrationController.php
namespace App\Controller;

use App\Entity\User;
use App\Form\RegistrationFormType;
use App\Security\EmailVerifier;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use Symfony\Component\Security\Core\User\UserInterface;

class RegistrationController extends AbstractController
{
    private $emailVerifier;

    public function __construct(EmailVerifier $emailVerifier)
    {
        $this->emailVerifier = $emailVerifier;
    }

    /**
     * @Route("/register", name="app_register")
     */